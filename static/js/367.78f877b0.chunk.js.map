{"version":3,"file":"static/js/367.78f877b0.chunk.js","mappings":"wNAgDA,UAxCa,WACX,IAAQA,GAAsBC,EAAAA,EAAAA,KAAtBD,kBACRE,GAA4CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GACxCI,GAAwBL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEdG,EAAuB,SAACC,EAAMC,GAClC,OAAAC,EAAAA,EAAAA,GAAW,IAAIC,IAAIH,EAAKI,KAAI,SAAAC,GAAC,MAAI,CAACJ,EAAII,GAAIA,EAAE,KAAGC,SACjD,GAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAZ,EAAA,OAAAW,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEL5B,EAAkBU,GAAM,KAAD,EAApCG,EAAIa,EAAAG,KACVtB,GAAkB,SAAAuB,GAAQ,OACxBlB,EAAqB,GAADmB,QAAAhB,EAAAA,EAAAA,GAAKe,IAAQf,EAAAA,EAAAA,GAAKF,EAAKmB,WAAU,SAAAC,GAAI,OAAIA,EAAKC,EAAE,GAAC,IACrER,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,SAEFU,QAAQC,MAAM,kCAAiCX,EAAAS,IAAS,yBAAAT,EAAAY,OAAA,GAAAb,EAAA,kBAE3D,kBATwB,OAAAH,EAAAiB,MAAA,KAAAC,UAAA,KAWzBnB,GACF,GAAG,CAACrB,EAAmBU,IAMvB,OACE+B,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CACbC,WAAYrC,EAAesC,OAC3BhB,KAAM,WANRjB,EAAQD,EAAO,EAMS,EACtBmC,SAAS,EACTC,QAAQL,EAAAA,EAAAA,KAACM,EAAAA,EAAM,IAAIC,UAEnBP,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACpC,KAAMP,KAGxB,C","sources":["components/Home/Home.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useMovieAPI } from '../../api/api';\n\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const { getTrendingMovies } = useMovieAPI();\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [page, setPage] = useState(1);\n\n  const removeDuplicatesById = (data, key) => {\n    return [...new Map(data.map(x => [key(x), x])).values()];\n  };\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      try {\n        const data = await getTrendingMovies(page);\n        setTrendingMovies(prevData =>\n          removeDuplicatesById([...prevData, ...data.results], item => item.id)\n        );\n      } catch (error) {\n        console.error('Error fetching trending movies:', error);\n      }\n    };\n\n    fetchTrendingMovies();\n  }, [getTrendingMovies, page]);\n\n  const loadMore = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={trendingMovies.length}\n      next={() => loadMore()}\n      hasMore={true}\n      loader={<Loader />}\n    >\n      <MoviesList data={trendingMovies} />\n    </InfiniteScroll>\n  );\n};\n\nexport default Home;\n"],"names":["getTrendingMovies","useMovieAPI","_useState","useState","_useState2","_slicedToArray","trendingMovies","setTrendingMovies","_useState3","_useState4","page","setPage","removeDuplicatesById","data","key","_toConsumableArray","Map","map","x","values","useEffect","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","sent","prevData","concat","results","item","id","t0","console","error","stop","apply","arguments","_jsx","InfiniteScroll","dataLength","length","hasMore","loader","Loader","children","MoviesList"],"sourceRoot":""}